import { replaceAll, findClosingBrace } from '../../helpers'

/**
 * Makes a series of replacements on MathQuill-generated LaTeX strings so that
 * they can be parsed by MathJS.
 *
 * Notes:
 *  1. This is pretty heuristic. Might discover updates needed.
 *  2. Much of this could be used to preprocess LaTeX generated by other means
 * (i.e., not MathQuill.) The main bit that is MathQuill-specific is probably
 * the operatorname replacements.
 *
 * @param  {string} fromMQ a MathQuill-generated LaTeX expression
 * @return {string} the input expression with LaTeX commands converted to mathjs
 */
export default function mathquillToMathJS(fromMQ) {
  const replacements = [
    { tex: '\\operatorname{diff}', mathjs: 'diff' },
    { tex: '\\operatorname{unitT}', mathjs: 'unitT' },
    { tex: '\\operatorname{unitN}', mathjs: 'unitN' },
    { tex: '\\operatorname{unitB}', mathjs: 'unitB' },
    { tex: '\\cdot', mathjs: ' * ' },
    { tex: '\\left', mathjs: '' },
    { tex: '\\right', mathjs: '' },
    { tex: '{', mathjs: '(' },
    { tex: '}', mathjs: ')' },
    { tex: '~', mathjs: ' ' },
    { tex: '\\', mathjs: ' ' }
  ]

  // remove fractions, then apply replacements
  const noFrac = fracToDivision(fromMQ)
  return replacements.reduce(
    (acc, r) => replaceAll(acc, r['tex'], r['mathjs'] ),
    noFrac)
}

/**
 * Recursively replaces LaTeX fractions with normal divison
 *   - example: \frac{a}{1 + \frac{b}{c}} --> {a}/{1 + {b}/{c}}
 */
export function fracToDivision(string) {
  const frac = '\\frac'
  let fracStart = string.indexOf(frac)
  const numStart = fracStart + frac.length

  if (fracStart < 0) { return string }

  const divIdx = findClosingBrace(string, numStart)
  // Remove frac, and add "/"
  const newString = string.slice(0, fracStart) +
    string.slice(numStart, divIdx + 1) + '/' +
    string.slice(divIdx + 1)
  // Test if any fracs remain
  fracStart = string.indexOf(frac)
  if (fracStart < 0) {
    return newString
  }

  return fracToDivision(newString)
}
